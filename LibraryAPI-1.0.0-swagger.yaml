swagger: '2.0'
info:
  version: 1.0.0
  title: Library Management System API
  description: >
    RESTful API for managing authors, books, customers, and borrowing records in a library.
basePath: /api/v1
tags:
  - name: Authors
    description: Endpoints for managing authors
  - name: Books
    description: Endpoints for managing books
  - name: Customers
    description: Endpoints for managing customers
  - name: Borrowing Records
    description: Endpoints for managing borrowing records
paths:
  /authors:
    get:
      tags:
        - Authors
      summary: Retrieve all authors
      description: Returns a list of all authors.
      produces:
        - application/json
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          type: integer
          default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          type: integer
          default: 10
        - name: sortBy
          in: query
          description: Sort by field
          required: false
          type: string
          default: id
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          type: string
          default: asc
      responses:
        '200':
          description: Successful operation. Returns a list of authors.
          schema:
            $ref: '#/definitions/PageOfAuthors'
        '404':
          description: No authors found.
    post:
      tags:
        - Authors
      summary: Create a new author
      description: Creates a new author.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: author
          description: Author object to be created
          required: true
          schema:
            $ref: '#/definitions/PostAuthor'
      responses:
        '200':
          description: Author created successfully.
          schema:
            $ref: '#/definitions/Author'
        '400':
          description: Bad request. Author cannot be created.
  /authors/{id}:
    get:
      tags:
        - Authors
      summary: Retrieve an author by ID
      description: Returns the author with the specified ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the author to retrieve
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation. Returns the author.
          schema:
            $ref: '#/definitions/Author'
        '404':
          description: Author not found.
    put:
      tags:
        - Authors
      summary: Update an existing author
      description: Updates the author with the specified ID.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the author to update
          required: true
          type: integer
          format: int64
        - in: body
          name: author
          description: Updated author object
          required: true
          schema:
            $ref: '#/definitions/PostAuthor'
      responses:
        '200':
          description: Author updated successfully.
          schema:
            $ref: '#/definitions/Author'
        '404':
          description: Author not found.
    delete:
      tags:
        - Authors
      summary: Delete an author by ID
      description: Deletes the author with the specified ID.
      parameters:
        - name: id
          in: path
          description: ID of the author to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Author deleted successfully.
        '404':
          description: Author not found.
  /books:
    get:
      tags:
        - Books
      summary: Retrieve all books
      description: Returns a list of all books.
      produces:
        - application/json
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          type: integer
          default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          type: integer
          default: 10
        - name: sortBy
          in: query
          description: Sort by field
          required: false
          type: string
          default: id
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          type: string
          default: asc
      responses:
        '200':
          description: Successful operation. Returns a list of books.
          schema:
            $ref: '#/definitions/PageOfBooks'
        '404':
          description: No books found.
    post:
      tags:
        - Books
      summary: Create a new book
      description: Creates a new book.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: book
          description: Book object to be created
          required: true
          schema:
            $ref: '#/definitions/PostBook'
      responses:
        '200':
          description: Book created successfully.
          schema:
            $ref: '#/definitions/Book'
        '400':
          description: Bad request. Book cannot be created.
  /books/{id}:
    get:
      tags:
        - Books
      summary: Retrieve a book by ID
      description: Returns the book with the specified ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the book to retrieve
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation. Returns the book.
          schema:
            $ref: '#/definitions/Book'
        '404':
          description: Book not found.
    put:
      tags:
        - Books
      summary: Update an existing book
      description: Updates the book with the specified ID.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the book to update
          required: true
          type: integer
          format: int64
        - in: body
          name: book
          description: Updated book object
          required: true
          schema:
            $ref: '#/definitions/PostBook'
      responses:
        '200':
          description: Book updated successfully.
          schema:
            $ref: '#/definitions/Book'
        '404':
          description: Book not found.
    delete:
      tags:
        - Books
      summary: Delete a book by ID
      description: Deletes the book with the specified ID.
      parameters:
        - name: id
          in: path
          description: ID of the book to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Book deleted successfully.
        '404':
          description: Book not found.
  /books/search:
    get:
      tags:
        - Books
      summary: Search books
      description: Retrieves books based on title, author, or ISBN.
      produces:
        - application/json
      parameters:
        - name: title
          in: query
          description: Title of the book
          required: false
          type: string
        - name: author
          in: query
          description: Author of the book
          required: false
          type: string
        - name: isbn
          in: query
          description: ISBN of the book
          required: false
          type: string
        - name: page
          in: query
          description: Page number
          required: false
          type: integer
          default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          type: integer
          default: 10
        - name: sortBy
          in: query
          description: Sort by field
          required: false
          type: string
          default: id
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          type: string
          default: asc
      responses:
        '200':
          description: Successful operation. Returns a list of books.
          schema:
            $ref: '#/definitions/PageOfBooks'
        '400':
          description: Bad request. Invalid parameters.
  /customers:
    get:
      tags:
        - Customers
      summary: Retrieve all customers
      description: Returns a list of all customers.
      produces:
        - application/json
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          type: integer
          default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          type: integer
          default: 10
        - name: sortBy
          in: query
          description: Sort by field
          required: false
          type: string
          default: id
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          type: string
          default: asc
      responses:
        '200':
          description: Successful operation. Returns a list of customers.
          schema:
            $ref: '#/definitions/PageOfCustomers'
        '404':
          description: No customers found.
    post:
      tags:
        - Customers
      summary: Create a new customer
      description: Creates a new customer.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: customer
          description: Customer object to be created
          required: true
          schema:
            $ref: '#/definitions/PostCustomer'
      responses:
        '200':
          description: Customer created successfully.
          schema:
            $ref: '#/definitions/Customer'
        '400':
          description: Bad request. Customer cannot be created.
  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Retrieve a customer by ID
      description: Returns the customer with the specified ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the customer to retrieve
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation. Returns the customer.
          schema:
            $ref: '#/definitions/Customer'
        '404':
          description: Customer not found.
    put:
      tags:
        - Customers
      summary: Update an existing customer
      description: Updates the customer with the specified ID.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the customer to update
          required: true
          type: integer
          format: int64
        - in: body
          name: customer
          description: Updated customer object
          required: true
          schema:
            $ref: '#/definitions/PostCustomer'
      responses:
        '200':
          description: Customer updated successfully.
          schema:
            $ref: '#/definitions/Customer'
        '404':
          description: Customer not found.
    delete:
      tags:
        - Customers
      summary: Delete a customer by ID
      description: Deletes the customer with the specified ID.
      parameters:
        - name: id
          in: path
          description: ID of the customer to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Customer deleted successfully.
        '404':
          description: Customer not found.
  /borrowings:
    get:
      tags:
        - Borrowing Records
      summary: Retrieve all borrowing records
      description: Returns a list of all borrowing records.
      produces:
        - application/json
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          type: integer
          default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          type: integer
          default: 10
        - name: sortBy
          in: query
          description: Sort by field
          required: false
          type: string
          default: id
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          type: string
          default: asc
      responses:
        '200':
          description: Successful operation. Returns a list of borrowing records.
          schema:
            $ref: '#/definitions/PageOfBorrowingRecords'
        '404':
          description: No borrowing records found.
    post:
      tags:
        - Borrowing Records
      summary: Create a new borrowing record
      description: Creates a new borrowing record.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: borrowingRecord
          description: Borrowing record object to be created
          required: true
          schema:
            $ref: '#/definitions/PostBorrowingRecords'
      responses:
        '200':
          description: Borrowing record created successfully.
          schema:
            $ref: '#/definitions/BorrowingRecord'
        '400':
          description: Bad request. Borrowing record cannot be created.
  /borrowings/{id}:
    get:
      tags:
        - Borrowing Records
      summary: Retrieve a borrowing record by ID
      description: Returns the borrowing record with the specified ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the borrowing record to retrieve
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation. Returns the borrowing record.
          schema:
            $ref: '#/definitions/BorrowingRecord'
        '404':
          description: Borrowing record not found.
    put:
      tags:
        - Borrowing Records
      summary: Update an existing borrowing record
      description: Updates the borrowing record with the specified ID.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the borrowing record to update
          required: true
          type: integer
          format: int64
        - in: body
          name: borrowingRecord
          description: Updated borrowing record object
          required: true
          schema:
            $ref: '#/definitions/PostBorrowingRecords'
      responses:
        '200':
          description: Borrowing record updated successfully.
          schema:
            $ref: '#/definitions/BorrowingRecord'
        '404':
          description: Borrowing record not found.
    delete:
      tags:
        - Borrowing Records
      summary: Delete a borrowing record by ID
      description: Deletes the borrowing record with the specified ID.
      parameters:
        - name: id
          in: path
          description: ID of the borrowing record to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Borrowing record deleted successfully.
        '404':
          description: Borrowing record not found.
  /borrowings/search:
    get:
      tags:
        - Borrowing Records
      summary: Search borrowing records
      description: Retrieves borrowing records based on user ID or book ID.
      produces:
        - application/json
      parameters:
        - name: userId
          in: query
          description: User ID of the borrowing record
          required: false
          type: integer
          format: int64
        - name: bookId
          in: query
          description: Book ID of the borrowing record
          required: false
          type: integer
          format: int64
        - name: page
          in: query
          description: Page number
          required: false
          type: integer
          default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          type: integer
          default: 10
        - name: sortBy
          in: query
          description: Sort by field
          required: false
          type: string
          default: id
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          type: string
          default: asc
      responses:
        '200':
          description: Successful operation. Returns a list of borrowing records.
          schema:
            $ref: '#/definitions/PageOfBorrowingRecords'
        '400':
          description: Bad request. Invalid parameters.
definitions:
  Author:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      birthDate:
        type: string
        format: date
      nationality:
        type: string
  PostAuthor:
    type: object
    properties:
      name:
        type: string
      birthDate:
        type: string
        format: date
      nationality:
        type: string
  PageOfAuthors:
    type: object
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/Author'
      pageable:
        type: object
      totalPages:
        type: integer
      totalElements:
        type: integer
  Book:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      authorID:
        type: integer
        format: int64
      isbn:
        type: string
      publicationDate:
        type: string
        format: date
      genre:
        type: string
      available:
        type: boolean
      author:
        $ref: '#/definitions/Author'
        
  PostBook:
    type: object
    properties:
      title:
        type: string
      authorID:
        type: integer
        format: int64
      isbn:
        type: string
      publicationDate:
        type: string
        format: date
      genre:
        type: string
      available:
        type: boolean  
  BookOfBorrow:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      authorID:
        type: integer
        format: int64
      isbn:
        type: string
      publicationDate:
        type: string
        format: date
      genre:
        type: string
      available:
        type: boolean
  PageOfBooks:
    type: object
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/Book'
      pageable:
        type: object
      totalPages:
        type: integer
      totalElements:
        type: integer
  Customer:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      email:
        type: string
      address:
        type: string
      phoneNumber:
        type: string
      borrowingRecords:
        type: array
        items:
          $ref: '#/definitions/BorrowingRecord'
  PostCustomer:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      address:
        type: string
      phoneNumber:
        type: string
      password:
        type: string
  PageOfCustomers:
    type: object
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/Customer'
      pageable:
        type: object
      totalPages:
        type: integer
      totalElements:
        type: integer
  CustomerOfBorrow:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      email:
        type: string
      address:
        type: string
      phoneNumber:
        type: string
  BorrowingRecord:
    type: object
    properties:
      id:
        type: integer
        format: int64
      customer:
        $ref: '#/definitions/CustomerOfBorrow'
      book:
        $ref: '#/definitions/BookOfBorrow'
      borrowDate:
        type: string
        format: date
      returnDate:
        type: string
        format: date
      customerID:
        type: integer
        format: int64
      bookID:
        type: integer
        format: int64
  PostBorrowingRecords:
    type: object
    properties:
      borrowDate:
        type: string
        format: date
      returnDate:
        type: string
        format: date
      customerID:
        type: integer
        format: int64
      bookID:
        type: integer
        format: int64
  PageOfBorrowingRecords:
    type: object
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/BorrowingRecord'
      pageable:
        type: object
      totalPages:
        type: integer
      totalElements:
        type: integer